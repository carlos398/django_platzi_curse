## Verificación de la descarga

1. Correr `python3 --version`
2. Correr `pip3 --version`

## Entorno virtual

1. Correr `python3 -m venv ENTORNO` donde `ENTORNO` sea el nombre deseado
2. Correr `source ENTORNO/bin/activate` para activar el entorno
    myvenv\Scripts\activate
3. Correr `deactivate` para desactivar el entorno

## Instalación de django

1. Activar entorno virtual
2. Correr `pip install django -U`

-----------------------------------

para crear el archivo 

pip freeze > requirements.txt 


para iniciar un proyecto

django-admin startproject platzigram


correr el servidor

/Desktop/Carlos Reyes/django-curso/django/platzigram$ python3 manage.py runserver


crear app

python3 manage.py startapp posts


en setings debe buscarse installed apps y agregar ahi el nombre de la app con una , al final

tambien recordar que todo se maneja desde urls


para las bases de datis

created
—> auto_now_add En cuanto se cree una instancia de ésta tabla en la base de datos, le va a cargar la fecha en la que se creó.
modified
—> auto_now Le guarda la fecha en la que se editó por última vez.


python manage.py migrate
Va a aplicar esos cambios en nuestra base de datos.
python manage.py makemigrations
Va a buscar los cambios en nuestros modelos y los va a reflejar en un archivo.


consola con django -> en la ruta poner 
python manage.py shell 

ORM: Object-relational mapping. Es el encargado de permitir
el acceso y control de una base de datos relacional a través de
una abstracción a clases y objetos.

Templates: Archivos HTML que permiten la inclusión y ejecución
de lógica especial para la presentación de datos.

Modelo: Parte de un proyecto de Django que se encarga de estructurar
las tablas y propiedades de la base de datos a través de clases de Python.

Vista: Parte de un proyecto de Django que se encarga de la
lógica de negocio y es la conexión entre el template y el modelo.

App: Conjunto de código que se encarga de resolver una parte
muy específica del proyecto, contiene sus modelos, vistas, urls, etc.

Patrón de diseño: Solución común a un problema particular.




# EMAIL VALIDATION
        u = User.objects.filter(email=email)
        if u:
            error = f'There is another account using {email}'
            return render(request, 'users/signup.html', {'error': error})